#file to load a model and predict the class

#importing the keras libraries and packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.models import model_from_json
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os

#to load model form json file

# load json and create model
json_file = open('../Model/model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
model = model_from_json(loaded_model_json)
# load weights into new model
model.load_weights("../Model/model.h5")
print("Loaded model from disk")

indices = {'78': 576, '36': 290, '496': 441, '465': 407, '555': 507, '174': 84, '589': 544, '88': 587, '201': 115, '472': 415, '134': 40, '127': 32, '298': 221, '370': 302, '563': 516, '554': 506, '57': 523, '383': 316, '299': 222, '121': 26, '227': 143, '412': 349, '214': 129, '391': 325, '466': 408, '491': 436, '275': 196, '69': 566, '347': 276, '305': 230, '96': 596, '45': 390, '29': 212, '278': 199, '107': 10, '230': 147, '14': 46, '4': 334, '534': 484, '522': 471, '269': 189, '90': 590, '130': 36, '413': 350, '116': 20, '63': 560, '396': 330, '564': 517, '538': 488, '155': 63, '159': 67, '474': 417, '148': 55, '323': 250, '513': 461, '475': 418, '456': 397, '451': 392, '557': 509, '217': 132, '3': 223, '430': 369, '310': 236, '272': 193, '418': 355, '547': 498, '146': 53, '371': 303, '93': 593, '537': 487, '242': 160, '169': 78, '252': 171, '425': 363, '221': 137, '410': 347, '283': 205, '185': 96, '467': 409, '149': 56, '70': 568, '131': 37, '109': 12, '191': 103, '517': 465, '175': 85, '553': 505, '487': 431, '530': 480, '480': 424, '597': 553, '135': 41, '455': 396, '51': 457, '200': 114, '434': 373, '133': 39, '215': 130, '500': 447, '306': 231, '271': 192, '291': 214, '516': 464, '192': 104, '302': 227, '293': 216, '327': 254, '385': 318, '570': 524, '581': 536, '125': 30, '266': 186, '279': 200, '281': 203, '48': 423, '300': 225, '572': 526, '518': 466, '495': 440, '325': 252, '303': 228, '449': 389, '463': 405, '151': 59, '38': 312, '73': 571, '448': 388, '464': 406, '113': 17, '503': 450, '290': 213, '80': 579, '585': 540, '226': 142, '562': 515, '357': 287, '508': 455, '153': 61, '411': 348, '587': 542, '355': 285, '295': 218, '160': 69, '320': 247, '514': 462, '223': 139, '363': 294, '86': 585, '124': 29, '30': 224, '117': 21, '311': 237, '535': 485, '395': 329, '438': 377, '444': 384, '432': 371, '379': 311, '232': 149, '179': 89, '316': 242, '24': 157, '22': 135, '136': 42, '470': 413, '559': 511, '376': 308, '387': 320, '461': 403, '189': 100, '490': 435, '52': 468, '423': 361, '550': 502, '424': 362, '392': 326, '462': 404, '231': 148, '209': 123, '512': 460, '422': 360, '586': 541, '31': 235, '352': 282, '436': 375, '273': 194, '420': 358, '429': 367, '118': 22, '469': 411, '393': 327, '177': 87, '1': 1, '511': 459, '163': 72, '250': 169, '407': 343, '187': 98, '583': 538, '541': 492, '89': 588, '58': 534, '92': 592, '332': 260, '91': 591, '304': 229, '308': 233, '523': 472, '164': 73, '571': 525, '243': 161, '247': 165, '115': 19, '552': 504, '20': 113, '249': 167, '591': 547, '152': 60, '194': 106, '296': 219, '211': 126, '313': 239, '431': 370, '333': 261, '419': 356, '204': 118, '368': 299, '123': 28, '197': 109, '156': 64, '8': 578, '248': 166, '263': 183, '234': 151, '595': 551, '579': 533, '568': 521, '182': 93, '46': 401, '259': 178, '329': 256, '551': 503, '2': 112, '285': 207, '471': 414, '267': 187, '28': 201, '319': 245, '378': 310, '9': 589, '445': 385, '108': 11, '479': 422, '521': 470, '286': 208, '6': 556, '580': 535, '289': 211, '62': 559, '314': 240, '450': 391, '561': 514, '122': 27, '198': 110, '47': 412, '158': 66, '427': 365, '539': 489, '509': 456, '519': 467, '577': 531, '359': 289, '525': 474, '229': 145, '442': 382, '593': 549, '167': 76, '274': 195, '11': 13, '576': 530, '398': 332, '492': 437, '377': 309, '408': 344, '203': 117, '529': 478, '506': 453, '76': 574, '112': 16, '276': 197, '138': 44, '349': 278, '75': 573, '288': 210, '119': 23, '212': 127, '404': 340, '33': 257, '342': 271, '531': 481, '545': 496, '190': 102, '360': 291, '350': 280, '348': 277, '39': 323, '426': 364, '56': 512, '41': 346, '367': 298, '102': 5, '195': 107, '584': 539, '502': 449, '258': 177, '362': 293, '66': 563, '54': 490, '453': 394, '282': 204, '406': 342, '55': 501, '60': 557, '458': 399, '166': 75, '111': 15, '328': 255, '527': 476, '32': 246, '103': 6, '292': 215, '483': 427, '141': 48, '485': 429, '494': 439, '507': 454, '280': 202, '343': 272, '40': 335, '532': 482, '364': 295, '143': 50, '336': 264, '0': 0, '137': 43, '145': 52, '238': 155, '228': 144, '428': 366, '71': 569, '87': 586, '239': 156, '129': 34, '213': 128, '210': 125, '82': 581, '441': 381, '207': 121, '346': 275, '488': 432, '365': 296, '287': 209, '326': 253, '26': 179, '381': 314, '35': 279, '105': 8, '37': 301, '414': 351, '322': 249, '19': 101, '594': 550, '486': 430, '309': 234, '202': 116, '389': 322, '251': 170, '233': 150, '590': 546, '318': 244, '501': 448, '578': 532, '186': 97, '373': 305, '575': 529, '27': 190, '183': 94, '176': 86, '421': 359, '397': 331, '524': 473, '415': 352, '515': 463, '384': 317, '447': 387, '104': 7, '81': 580, '128': 33, '345': 274, '68': 565, '386': 319, '574': 528, '34': 268, '173': 83, '277': 198, '452': 393, '598': 554, '270': 191, '257': 176, '241': 159, '244': 162, '558': 510, '172': 82, '199': 111, '178': 88, '331': 259, '335': 263, '13': 35, '476': 419, '188': 99, '358': 288, '380': 313, '542': 493, '497': 442, '446': 386, '154': 62, '142': 49, '126': 31, '549': 500, '240': 158, '21': 124, '171': 81, '25': 168, '477': 420, '457': 398, '592': 548, '161': 70, '253': 172, '533': 483, '356': 286, '399': 333, '264': 184, '193': 105, '588': 543, '369': 300, '147': 54, '255': 174, '206': 120, '261': 181, '417': 354, '110': 14, '433': 372, '205': 119, '599': 555, '74': 572, '236': 153, '140': 47, '43': 368, '560': 513, '330': 258, '99': 599, '435': 374, '375': 307, '546': 497, '390': 324, '139': 45, '382': 315, '526': 475, '400': 336, '324': 251, '454': 395, '50': 446, '443': 383, '67': 564, '540': 491, '170': 80, '17': 79, '98': 598, '505': 452, '556': 508, '168': 77, '569': 522, '543': 494, '218': 133, '354': 284, '5': 445, '144': 51, '235': 152, '219': 134, '297': 220, '72': 570, '565': 518, '246': 164, '44': 379, '528': 477, '536': 486, '596': 552, '315': 241, '341': 270, '196': 108, '254': 173, '401': 337, '12': 24, '225': 141, '49': 434, '165': 74, '510': 458, '468': 410, '484': 428, '307': 232, '83': 582, '268': 188, '208': 122, '100': 3, '489': 433, '222': 138, '394': 328, '473': 416, '366': 297, '499': 444, '10': 2, '97': 597, '284': 206, '388': 321, '312': 238, '548': 499, '493': 438, '150': 58, '372': 304, '402': 338, '337': 265, '53': 479, '77': 575, '339': 267, '132': 38, '85': 584, '334': 262, '84': 583, '566': 519, '216': 131, '460': 402, '162': 71, '260': 180, '409': 345, '567': 520, '416': 353, '262': 182, '61': 558, '340': 269, '64': 561, '344': 273, '374': 306, '120': 25, '582': 537, '245': 163, '405': 341, '106': 9, '184': 95, '79': 577, '351': 281, '256': 175, '42': 357, '180': 91, '504': 451, '7': 567, '439': 378, '59': 545, '482': 426, '573': 527, '459': 400, '478': 421, '265': 185, '181': 92, '301': 226, '157': 65, '353': 283, '237': 154, '95': 595, '16': 68, '338': 266, '403': 339, '437': 376, '101': 4, '114': 18, '220': 136, '317': 243, '65': 562, '481': 425, '520': 469, '224': 140, '94': 594, '361': 292, '294': 217, '15': 57, '544': 495, '498': 443, '440': 380, '23': 146, '18': 90, '321': 248}

indices = indices.items()
count = 0
for filename in os.listdir("./images_in1folder"):  #../Sanskrit-letter-dataset/images_in1folder
	test_image = image.load_img('./images_in1folder/'+filename,target_size = (64,64))
	test_image = image.img_to_array(test_image)
	test_image = np.expand_dims(test_image,axis=0)
	result = model.predict(test_image)
	actual = int(filename.split("_")[0])
	print(actual,end='\t')
	predicted = 0

	for i in range(0,len(result[0])):
		if(result[0][i] == 1):
			predicted = i
			break
	for tup in indices:
		if(tup[1] == predicted):
			predicted = tup[0]
			break

	print(predicted)	
	if(str(predicted) == str(actual)):
		count = count + 1
		#print(count)

print(count)

